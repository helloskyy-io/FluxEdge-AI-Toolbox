apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: ubuntu-deployment-
spec:
  serviceAccountName: batch-job-sa
  nodeSelector:
    kubernetes.io/hostname: "" # This is the node the workflow will run on. This will be provided by FluxEdge dynamically
  entrypoint: main
  arguments:
    parameters:
      - name: repoUrl
        value: "https://github.com/helloskyy-io/FluxEdge-AI-Toolbox.git"  # Public repository URL
      - name: repoBranch
        value: "main"  # Branch to clone
      # Node Selector will be dynamically added by FluxEdge
      # Deployment Information will be dynamically added by FluxEdge
  templates:
  - name: main
    steps:
      - - name: clone-repo
          template: clone-repo
          arguments:
            parameters:
              - name: repoUrl
                value: "{{workflow.parameters.repoUrl}}"
              - name: repoBranch
                value: "{{workflow.parameters.repoBranch}}"

      - - name: kustomize-build
          template: kustomize-build
          arguments:
            parameters:
              - name: nodeSelector
                value: "{{workflow.parameters.nodeSelector}}"
              - name: deploymentInformation
                value: "{{workflow.parameters.deploymentInformation}}"
            artifacts:
              - name: repo
                from: "{{steps.clone-repo.outputs.artifacts.repo}}"

      - - name: apply-kubectl
          template: apply-kubectl
          arguments:
            artifacts:
              - name: manifests
                from: "{{steps.kustomize-build.outputs.artifacts.manifests}}"

      - - name: post-sync-hook
          template: post-sync-hook
          arguments:
            artifacts:
              - name: repo
                from: "{{steps.clone-repo.outputs.artifacts.repo}}"

  - name: clone-repo
    inputs:
      parameters:
        - name: repoUrl
        - name: repoBranch
    container:
      image: alpine/git
      command:
        - sh
        - -c
      args:
        - |
          echo "Cloning repository..."
          git clone --branch {{inputs.parameters.repoBranch}} {{inputs.parameters.repoUrl}} /workspace
          echo "Repository content:"
          ls -al /workspace
    outputs:
      artifacts:
        - name: repo
          path: /workspace

  - name: kustomize-build
    inputs:
      parameters:
        - name: nodeSelector
        - name: deploymentInformation
      artifacts:
        - name: repo
          path: /workspace
    script:
      image: line/kubectl-kustomize
      command: [sh]
      source: |
        #!/bin/sh
        cd /workspace/deployments/ubuntu_22.04/deployment_configs/overlays/primary
        echo "Replacing placeholders in deployment files..."
        sed -i "s/\NODE_SELECTOR/\"{{inputs.parameters.nodeSelector}}\"/g" deployment-patch.yaml
        sed -i "s/\DEPLOYMENT_INFORMATION/{{inputs.parameters.deploymentInformation}}/g" deployment-patch.yaml
        sed -i "s/\DEPLOYMENT_INFORMATION/{{inputs.parameters.deploymentInformation}}/g" service-patch.yaml
        sed -i "s/\DEPLOYMENT_INFORMATION/{{inputs.parameters.deploymentInformation}}/g" kustomization.yaml
        echo "Modified deployment-patch.yaml:"
        cat deployment-patch.yaml || true
        echo "Modified service-patch.yaml:"
        cat service-patch.yaml || true
        echo "Modified kustomization.yaml:"
        cat kustomization.yaml || true
        echo "Generating manifests using kustomize..."
        kustomize build . -o /workspace/modified
        echo "Generated manifests:"
        ls -al /workspace/modified
        cat /workspace/modified/* || true
    outputs:
      artifacts:
        - name: manifests
          path: /workspace/modified

  - name: apply-kubectl
    inputs:
      artifacts:
        - name: manifests
          path: /workspace/modified
    container:
      image: bitnami/kubectl:1.21
      command: [sh, -c]
      args:
        - |
          echo "Applying Kubernetes manifests..."
          kubectl apply -f /workspace/modified && \
          echo "Checking deployment rollout status..." && \
          kubectl rollout status deployment/flux-deployment-10564-ubuntu-deployment -n default || true && \
          echo "Describing deployment..." && \
          kubectl describe deployment flux-deployment-10564-ubuntu-deployment -n default || true && \
          echo "Listing pods in namespace..." && \
          kubectl get pods -n default -o wide || true && \
          echo "Fetching events in namespace..." && \
          kubectl get events -n default || true

  - name: create-configmap
    inputs:
      artifacts:
        - name: repo
          path: /workspace
    container:
      image: bitnami/kubectl:1.21
      command: [sh, -c]
      args:
        - |
          echo "Creating ConfigMap for the playbook..."
          kubectl create configmap ubuntu-playbook-config \
            --from-file=/workspace/deployments/ubuntu_22.04/deployment_configs/post_sync_hook/ubuntu_playbook_config.yaml || \
            echo "ConfigMap already exists, skipping creation."

  - name: post-sync-hook
    inputs:
      artifacts:
        - name: repo
          path: /workspace
    container:
      image: bitnami/kubectl:1.21
      command: [sh, -c]
      args:
        - |
          echo "Applying PostSync hook job from file..."
          kubectl apply -f /workspace/deployments/ubuntu_22.04/deployment_configs/post_sync_hook/post_sync_hook.yaml
          echo "Waiting for PostSync hook to complete..."
          kubectl wait --for=condition=complete job/ubuntu-post-sync --timeout=300s
