# main.yml Under role_configure_cuda
# This role checks existing version of cuda and removes if not matching desired version
# role then installs correct version of cuda

# Check the currently installed version of CUDA using the nvcc command
- name: Check current CUDA version
  command: nvcc --version
  register: cuda_version_check
  ignore_errors: yes

# Prompt the user for confirmation to remove existing CUDA versions if the detected version is not 12+
- name: Prompt for CUDA removal if not version 12+
  pause:
    prompt: >
      Existing installation of CUDA detected as version {{ cuda_version_check.stdout | regex_search('release (\\d+\\.\\d+)', '\\1') | first }}.
      Required version is 12.x.
      Proceed with deleting existing version? (y/n)
  when: cuda_version_check.rc == 0 and "release 12" not in cuda_version_check.stdout
  register: cuda_removal_confirmation

# Remove existing CUDA installations based on user confirmation
- name: Remove existing CUDA versions
  apt:
    name: cuda*
    state: absent
  when: 
    - cuda_removal_confirmation is defined
    - cuda_removal_confirmation.user_input | lower == 'y'
  become: yes

# Installation block for CUDA 12.4 Toolkit, ensuring the system has the required version
- name: Install CUDA 12.4 Toolkit
  block:
    # Download the CUDA keyring to authenticate the CUDA repository
    - name: Download CUDA Keyring
      get_url:
        url: https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-keyring_1.1-1_all.deb
        dest: "/tmp/cuda-keyring_1.1-1_all.deb"

    # Install the downloaded CUDA keyring package
    - name: Install CUDA Keyring
      apt:
        deb: "/tmp/cuda-keyring_1.1-1_all.deb"

    # Update the APT package cache to recognize new repositories
    - name: Update APT repository cache
      apt:
        update_cache: yes

    # Install the specified version of the CUDA Toolkit
    - name: Install CUDA Toolkit 12.4
      apt:
        name: cuda-toolkit-12-4
        state: present
  become: yes